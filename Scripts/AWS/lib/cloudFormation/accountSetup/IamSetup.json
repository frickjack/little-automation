{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "AWS CloudFormation Template sets up core account managed policies and roles",
  "Parameters" : {
    "RegionList": {
      "Description" : "List of regions to restrict API calls to",
      "Type": "CommaDelimitedList",
      "Default" : "us-east-1,us-east-2",
      "ConstraintDescription" : "must be a list of region names"
    }
  },
  "Resources" : {
    "IamGroupAdmin": {
      "Type" : "AWS::IAM::Group",
      "Properties" : {
          "GroupName" : "littleAdmin",
          "Path" : "/littleware/account/"
      }
    },

    "IamGroupOperator": {
      "Type" : "AWS::IAM::Group",
      "Properties" : {
          "GroupName" : "littleOperator",
          "Path" : "/littleware/account/"
        }
    },

    "IamRoleOperator": {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
          "AssumeRolePolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                  "AWS": { "Ref" : "AWS::AccountId" }
                },
                "Action": [ "sts:AssumeRole" ]
            } ]
          },
          "MaxSessionDuration" : 3600,
          "Path" : "/littleware/account/user/",
          "RoleName" : "littleOperator"
        }
    },
    "IamRoleAdmin": {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
          "AssumeRolePolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                  "AWS": { "Ref" : "AWS::AccountId" }
                },
                "Action": [ "sts:AssumeRole" ]
            } ]
          },
          "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/IAMFullAccess"
          ],
          "MaxSessionDuration" : 3600,
          "Path" : "/littleware/account/user/",
          "RoleName" : "littleAdmin"
        }
    },
    "IamPolicyAssumeAdmin": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "assume admin policy - at the /account level - do everything",
        "ManagedPolicyName" : "assumeAdminMFA",
        "Path" : "/littleware/account/",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
              {
                "Effect": "Allow",
                "Action": "sts:AssumeRole",
                "Resource": "*",
                "Condition": {
                    "Bool": {
                        "aws:MultiFactorAuthPresent": "true"
                    }
                }
              }
          ]
        },
        "Groups": [
          { "Ref" : "IamGroupOperator" }
        ]
      }
    },
    "IamPolicyAssumeOperator": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "assume operator role policy - at the /account level - do everything - requires MFA - attach to groups not roles",
        "ManagedPolicyName" : "assumeOperatorMFA",
        "Path" : "/littleware/account/",
        "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": "sts:AssumeRole",
                "Resource": [
                  { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/littleware/account/user/", { "Ref": "IamRoleOperator" } ]] },
                  { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/littleware/app/*" ]] }
                ],
                "Condition": {
                      "Bool": {
                          "aws:MultiFactorAuthPresent": "true"
                      }
                  }
              }]
          },
          "Groups": [
            { "Ref" : "IamGroupAdmin" },
            { "Ref" : "IamGroupOperator" }
          ]  
        }
    },
    "IamPolicyLimitRegions": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
          "Description" : "/account level policy - limit API calls to specified regions",
          "ManagedPolicyName" : "limitRegions",
          "Path" : "/littleware/account/",
          "PolicyDocument" : {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Deny",
                "Action": "*",
                "Resource": "*",
                "Condition": {
                  "StringNotEquals": {
                    "aws:RequestedRegion": [
                      "eu-central-1",
                      "eu-west-1"
                    ]
                  }
                }
              }
            ]
          },
          "Groups": [
            { "Ref" : "IamGroupAdmin" },
            { "Ref" : "IamGroupOperator" }
          ],
          "Roles": [
            { "Ref" : "IamRoleAdmin" },
            { "Ref" : "IamRoleOperator" }
          ]  
        }
    },
    "IamPolicyRotateKeys": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
          "Description" : "/account level policy - allow an IAM user to rotate her own API keys",
          "ManagedPolicyName" : "userRotateKeys",
          "Path" : "/littleware/account/",
          "PolicyDocument" : {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Sid": "ManageOwnAccessKeys",
                    "Effect": "Allow",
                    "Action": [
                        "iam:CreateAccessKey",
                        "iam:DeleteAccessKey",
                        "iam:GetAccessKeyLastUsed",
                        "iam:GetUser",
                        "iam:ListAccessKeys",
                        "iam:UpdateAccessKey"
                    ],
                    "Resource": "arn:aws:iam::*:user/${aws:username}"
                }
            ]
          },
          "Groups": [
            { "Ref" : "IamGroupAdmin" },
            { "Ref" : "IamGroupOperator" }
          ]  
        }
      },
      "IamPolicyAdmin": {
        "Type" : "AWS::IAM::ManagedPolicy",
        "Properties" : {
          "Description" : "admin policy - at the /account level - do everything",
          "ManagedPolicyName" : "admin",
          "Path" : "/littleware/account/",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "apigateway:*"
                ],
                "Resource": "arn:aws:apigateway:*::/*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "execute-api:Invoke"
                ],
                "Resource": "arn:aws:execute-api:*:*:*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "cognito-identity:*",
                  "cognito-sync:*",
                  "iam:ListRoles",
                  "iam:ListOpenIdConnectProviders",
                  "sns:ListPlatformApplications"
                ],
                "Resource": "*"
              },
              {
                "Action": [
                  "dynamodb:*",
                  "iam:ListRoles"
                ],
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "ecr:*"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "route53:*"
                ],
                "Resource": [
                  "*"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "elasticloadbalancing:DescribeLoadBalancers"
                ],
                "Resource": [
                  "*"
                ]
              },
              {
                "Effect": "Allow",
                "Action": "s3:*",
                "Resource": "*"
              },
              {
                "Action": [
                  "sns:*"
                ],
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "acm:*"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "acm-pca:*"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "cloudtrail:*",
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup"
                ],
                "Resource": "arn:aws:logs:*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "iam:PassRole",
                  "iam:ListRoles",
                  "iam:GetRolePolicy"
                ],
                "Resource": "arn:aws:iam::*"
              },
              {
                "Action": [
                  "codebuild:*"
                ],
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Action": [
                  "logs:GetLogEvents"
                ],
                "Effect": "Allow",
                "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "codecommit:*"
                ],
                "Resource": "*"
              },
              {
                "Action": "codedeploy:*",
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Action": [
                  "codepipeline:*",
                  "iam:ListRoles",
                  "lambda:GetFunctionConfiguration",
                  "lambda:ListFunctions"
                ],
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "kms:CreateAlias",
                  "kms:CreateKey",
                  "kms:DeleteAlias",
                  "kms:Describe*",
                  "kms:GenerateRandom",
                  "kms:Get*",
                  "kms:List*",
                  "iam:ListGroups",
                  "iam:ListRoles",
                  "iam:ListUsers"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "cloudwatch:*",
                  "dynamodb:*",
                  "iam:PassRole",
                  "lambda:*",
                  "logs:*",
                  "s3:*"
                ],
                "Resource": "*"
              },
              {
                "Action": [
                  "secretsmanager:*",
                  "cloudformation:CreateChangeSet",
                  "cloudformation:DescribeChangeSet",
                  "cloudformation:DescribeStackResource",
                  "cloudformation:DescribeStacks",
                  "cloudformation:ExecuteChangeSet",
                  "ec2:DescribeSecurityGroups",
                  "ec2:DescribeSubnets",
                  "ec2:DescribeVpcs",
                  "kms:DescribeKey",
                  "kms:ListAliases",
                  "kms:ListKeys",
                  "lambda:ListFunctions",
                  "rds:DescribeDBInstances",
                  "tag:GetResources"
                ],
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Action": [
                  "serverlessrepo:CreateCloudFormationChangeSet"
                ],
                "Effect": "Allow",
                "Resource": "arn:aws:serverlessrepo:*:*:applications/SecretsManager*"
              },
              {
                "Effect": "Allow",
                "Action": ["cloudformation:*"],
                "Resource": "*"
              }
            ]
          },
          "Roles": [
            { "Ref" : "IamRoleAdmin" },
            { "Ref" : "IamRoleOperator" }
          ]
        }
      }
  },

  "Outputs" : {
  }
}
