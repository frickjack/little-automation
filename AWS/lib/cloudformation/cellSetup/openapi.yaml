---
swagger: '2.0'
info:
  description: >-
    api.frickjack.com API - just hello for now
  version: 1.0.0
  title: api.frickjack.com
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: admin@frickjack.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
basePath: /
tags:
  - name: littleware
    description: littleware api
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
schemes:
  - https
paths:
  /login:
    get:
      summary: oidc client initiate login
      consumes:
        - application/json
      produces:
        - application/json
      parameters: 
        - in: query
          name: redirect_uri
          schema:
            type: string
          description: post login redirect
      responses:
        '500':
          description: unexpected failure
          schema:
            $ref: '#/definitions/SimpleError'
        '400':
          description: illegal parameters
          schema:
            $ref: '#/definitions/SimpleError'
        '302':
          description: redirect to idp
          schema:
            $ref: '#/definitions/Message'    
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 500
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${apiLambda.Arn}/invocations"
        passthroughBehavior: when_no_match
        # lambda integration is always POST
        httpMethod: POST
        type: aws_proxy
  /logout:
    get:
      summary: oidc client initiate login
      consumes:
        - application/json
      produces:
        - application/json
      parameters: 
        - in: query
          name: redirect_uri
          schema:
            type: string
          description: post login redirect
      responses:
        '500':
          description: unexpected failure
          schema:
            $ref: '#/definitions/SimpleError'
        '400':
          description: illegal parameters
          schema:
            $ref: '#/definitions/SimpleError'
        '302':
          description: redirect to idp
          schema:
            $ref: '#/definitions/Message'    
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 500
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${apiLambda.Arn}/invocations"
        passthroughBehavior: when_no_match
        # lambda integration is always POST
        httpMethod: POST
        type: aws_proxy

  /user:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      responses:
        '500':
          description: unexpected failure
        '200':
          description: CORS headers if applicable
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 500
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${apiLambda.Arn}/invocations"
        passthroughBehavior: when_no_match
        # lambda integration is always POST
        httpMethod: POST
        type: aws_proxy
    get:
      summary: retrieve small user profile
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '500':
          description: unexpected failure
          schema:
            $ref: '#/definitions/SimpleError'
        '400':
          description: illegal parameters
          schema:
            $ref: '#/definitions/SimpleError'
        '200':
          description: token verified
          schema:
            $ref: '#/definitions/Message'    
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 500
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${apiLambda.Arn}/invocations"
        passthroughBehavior: when_no_match
        # lambda integration is always POST
        httpMethod: POST
        type: aws_proxy

  /loginCallback:
    get:
      summary: oidc login callback
      consumes:
        - application/json
      produces:
        - application/json
      parameters: 
        - in: query
          name: state
          schema:
            type: string
          description: client callback state
        - in: query
          name: code
          schema:
            type: string
          description: oauth auth flow code
      responses:
        '500':
          description: unexpected failure
          schema:
            $ref: '#/definitions/SimpleError'
        '400':
          description: illegal parameters
          schema:
            $ref: '#/definitions/SimpleError'
        '302':
          description: redirect to idp
          schema:
            $ref: '#/definitions/Message'
        '200':
          description: token verified
          schema:
            $ref: '#/definitions/Message'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 500
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${apiLambda.Arn}/invocations"
        passthroughBehavior: when_no_match
        # lambda integration is always POST
        httpMethod: POST
        type: aws_proxy

  /logoutCallback:
    get:
      summary: oidc logout callback
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '500':
          description: unexpected failure
          schema:
            $ref: '#/definitions/SimpleError'
        '400':
          description: illegal parameters
          schema:
            $ref: '#/definitions/SimpleError'
        '302':
          description: redirect to idp
          schema:
            $ref: '#/definitions/Message'
        '200':
          description: token verified
          schema:
            $ref: '#/definitions/Message'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 500
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${apiLambda.Arn}/invocations"
        passthroughBehavior: when_no_match
        # lambda integration is always POST
        httpMethod: POST
        type: aws_proxy

  /hello:
    get:
      summary: oidc logout callback
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '500':
          description: unexpected failure
          schema:
            $ref: '#/definitions/SimpleError'
        '400':
          description: illegal parameters
          schema:
            $ref: '#/definitions/SimpleError'
        '302':
          description: redirect to idp
          schema:
            $ref: '#/definitions/Message'
        '200':
          description: hello
          schema:
            $ref: '#/definitions/Message'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 500
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${apiLambda.Arn}/invocations"
        passthroughBehavior: when_no_match
        # lambda integration is always POST
        httpMethod: POST
        type: aws_proxy

definitions:
  Message:
    type: object
    required:
      - message
    properties:
      message:
        type: string
      status:
        type: string
  SimpleError:
    type: object
    required:
      - error
    properties:
      error:
        type: string
  AuthInfo:
    type: object
    required:
      - email
      - groups
      - iat
    properties:
      email:
        type: string
      groups:
        type: array
        items:
          type: string
      iat:
        type: integer
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
