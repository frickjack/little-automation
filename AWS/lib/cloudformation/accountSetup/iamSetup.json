{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "AWS CloudFormation Template sets up core account managed policies and roles",
  "Parameters" : {
    "RegionList": {
      "Description" : "List of regions to restrict API calls to",
      "Type": "CommaDelimitedList",
      "Default" : "us-east-1,us-east-2",
      "ConstraintDescription" : "must be a list of region names"
    }
  },
  "Resources" : {
    "IamGroupAdmin": {
      "Type" : "AWS::IAM::Group",
      "Properties" : {
          "GroupName" : "littleAdmin",
          "Path" : "/littleware/account/"
      }
    },

    "IamGroupDeveloper": {
      "Type" : "AWS::IAM::Group",
      "Properties" : {
          "GroupName" : "littleDeveloper",
          "Path" : "/littleware/account/"
        }
    },

    "IamGroupOperator": {
      "Type" : "AWS::IAM::Group",
      "Properties" : {
          "GroupName" : "littleOperator",
          "Path" : "/littleware/account/"
        }
    },

    "IamRoleDeveloper": {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
          "AssumeRolePolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                  "AWS": { "Ref" : "AWS::AccountId" }
                },
                "Action": [ "sts:AssumeRole" ]
            } ]
          },
          "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess",
            "arn:aws:iam::aws:policy/AWSWAFConsoleReadOnlyAccess",
            "arn:aws:iam::aws:policy/AWSCloudShellFullAccess",
            "arn:aws:iam::aws:policy/AWSCloud9User"
          ],
          "MaxSessionDuration" : 3600,
          "Path" : "/littleware/account/user/",
          "RoleName" : "littleDeveloper"
        }
    },
    "IamRoleOperator": {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
          "AssumeRolePolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                  "AWS": { "Ref" : "AWS::AccountId" }
                },
                "Action": [ "sts:AssumeRole" ]
            } ]
          },
          "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/AWSWAFConsoleReadOnlyAccess",
            "arn:aws:iam::aws:policy/AWSCloudShellFullAccess",
            "arn:aws:iam::aws:policy/AWSCloud9Administrator"
          ],
          "MaxSessionDuration" : 3600,
          "Path" : "/littleware/account/user/",
          "RoleName" : "littleOperator"
        }
    },
    "IamRoleAdmin": {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
          "AssumeRolePolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                  "AWS": { "Ref" : "AWS::AccountId" }
                },
                "Action": [ "sts:AssumeRole" ]
            } ]
          },
          "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/AWSCloudTrailFullAccess",
              "arn:aws:iam::aws:policy/IAMFullAccess",
              "arn:aws:iam::aws:policy/AWSWAFConsoleReadOnlyAccess",
              "arn:aws:iam::aws:policy/AWSCloudShellFullAccess",
              "arn:aws:iam::aws:policy/AWSCloud9Administrator"
          ],
          "MaxSessionDuration" : 3600,
          "Path" : "/littleware/account/user/",
          "RoleName" : "littleAdmin"
        }
    },
    "IamRoleLambda": {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
          "AssumeRolePolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                  "Service": [ "lambda.amazonaws.com" ]
                },
                "Action": [ "sts:AssumeRole" ]
              }
            ]
          },
          "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
          ],
          "MaxSessionDuration" : 3600,
          "Path" : "/littleware/account/service/",
          "RoleName" : "littleLamda"
        }
    },
    "IamPolicyAssumeAdmin": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "assume admin policy - at the /account level - do everything",
        "ManagedPolicyName" : "assumeAdminMFA",
        "Path" : "/littleware/account/",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
              {
                "Effect": "Allow",
                "Action": "sts:AssumeRole",
                "Resource": "*",
                "Condition": {
                    "Bool": {
                        "aws:MultiFactorAuthPresent": "true"
                    }
                }
              }
          ]
        },
        "Groups": [
          { "Ref" : "IamGroupAdmin" }
        ]
      }
    },
    "IamPolicyAssumeOperator": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "assume operator role policy - at the /account level - do everything - requires MFA - attach to groups not roles",
        "ManagedPolicyName" : "assumeOperatorMFA",
        "Path" : "/littleware/account/",
        "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": "sts:AssumeRole",
                "Resource": [
                  { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/littleware/account/user/", { "Ref": "IamRoleOperator" } ]] },
                  { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/littleware/app/*" ]] }
                ],
                "Condition": {
                      "Bool": {
                          "aws:MultiFactorAuthPresent": "true"
                      }
                  }
              }]
          },
          "Groups": [
            { "Ref" : "IamGroupAdmin" },
            { "Ref" : "IamGroupOperator" }
          ]  
        }
    },
    "IamPolicyAssumeDeveloper": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "assume developer role policy - at the /account level - do everything - requires MFA - attach to groups not roles",
        "ManagedPolicyName" : "assumeDeveloperMFA",
        "Path" : "/littleware/account/",
        "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": "sts:AssumeRole",
                "Resource": [
                  { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/littleware/account/user/", { "Ref": "IamRoleDeveloper" } ]] },
                  { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/littleware/app/*" ]] }
                ],
                "Condition": {
                      "Bool": {
                          "aws:MultiFactorAuthPresent": "true"
                      }
                  }
              }]
          },
          "Groups": [
            { "Ref" : "IamGroupDeveloper" }
          ]  
        }
    },
    "IamPolicyAssumeService": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "assume service roles policy - /app/* path roles - attach to roles not groups",
        "ManagedPolicyName" : "assumeServiceRoles",
        "Path" : "/littleware/account/",
        "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": "sts:AssumeRole",
                "Resource": [
                  { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/littleware/app/*" ]] }
                ]
              }]
          },
          "Roles": [
            { "Ref" : "IamRoleAdmin" },
            { "Ref" : "IamRoleOperator" },
            { "Ref" : "IamRoleDeveloper" }
          ]  
        }
    },
    "IamPolicyLimitRegions": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
          "Description" : "/account level policy - limit API calls to specified regions",
          "ManagedPolicyName" : "limitRegions",
          "Path" : "/littleware/account/",
          "PolicyDocument" : {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Deny",
                "Action": "*",
                "Resource": "*",
                "Condition": {
                  "StringNotEquals": {
                    "aws:RequestedRegion": { "Ref": "RegionList" }
                  }
                }
              },
              {
                "Effect": "Deny",
                "Action": "*",
                "Resource": "*",
                "Condition": {"Bool": {"aws:SecureTransport": "false"}}
              }
            ]
          },
          "Groups": [
            { "Ref" : "IamGroupAdmin" },
            { "Ref" : "IamGroupOperator" },
            { "Ref" : "IamGroupDeveloper" }
          ],
          "Roles": [
            { "Ref" : "IamRoleAdmin" },
            { "Ref" : "IamRoleOperator" },
            { "Ref" : "IamRoleDeveloper" }
          ]  
        }
    },
    "IamPolicyRotateKeys": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
          "Description" : "/account level policy - allow an IAM user to rotate her own API keys",
          "ManagedPolicyName" : "userRotateKeys",
          "Path" : "/littleware/account/",
          "PolicyDocument" : {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Sid": "ManageOwnAccessKeys",
                    "Effect": "Allow",
                    "Action": [
                        "iam:CreateAccessKey",
                        "iam:DeleteAccessKey",
                        "iam:GetAccessKeyLastUsed",
                        "iam:GetUser",
                        "iam:ListAccessKeys",
                        "iam:UpdateAccessKey"
                    ],
                    "Resource": "arn:aws:iam::*:user/${aws:username}"
                }
            ]
          },
          "Groups": [
            { "Ref" : "IamGroupAdmin" },
            { "Ref" : "IamGroupOperator" },
            { "Ref" : "IamGroupDeveloper" }
          ]  
        }
      },
      "IamPolicyDeveloper": {
        "Type" : "AWS::IAM::ManagedPolicy",
        "Properties" : {
          "Description" : "admin policy - at the /account level - do everything",
          "ManagedPolicyName" : "developer",
          "Path" : "/littleware/account/",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "S3ConsoleAccess",
                "Effect": "Allow",
                "Action": [
                    "s3:Get*",
                    "s3:List*",
                    "s3:*Object"
                ],
                "Resource": "*"
              },
              {
                "Action": [
                    "logs:Describe*",
                    "logs:Get*",
                    "logs:List*",
                    "logs:StartQuery",
                    "logs:StopQuery",
                    "logs:TestMetricFilter",
                    "logs:FilterLogEvents"
                ],
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Sid": "ManageSecrets",
                "Action": [
                  "secretsmanager:Describe*",
                  "secretsmanager:Get*",
                  "secretsmanager:List*",
                  "ssm:Describe*",
                  "ssm:Get*",
                  "ssm:List*",
                  "sns:List*",
                  "sns:Publish"
                ],
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "iam:PassRole",
                  "iam:List*",
                  "iam:Get*"
                ],
                "Resource": "arn:aws:iam::*"
              }
            ]
          },
          "Roles": [
            { "Ref" : "IamRoleDeveloper" }
          ]  
        }
      },
      "IamPolicyAdmin": {
        "Type" : "AWS::IAM::ManagedPolicy",
        "Properties" : {
          "Description" : "admin policy - at the /account level - do everything",
          "ManagedPolicyName" : "admin",
          "Path" : "/littleware/account/",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "execute-api:Invoke"
                ],
                "Resource": "arn:aws:execute-api:*:*:*"
              },
              {
                "Effect": "Allow",
                "Action": [
                    "aws-portal:ViewBilling",
                    "aws-portal:ModifyBilling",
                    "budgets:ViewBudget",
                    "budgets:ModifyBudget"
                ],
                "Resource": [
                    "*"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "cognito-idp:*",
                  "cognito-identity:*",
                  "cognito-sync:*",
                  "sns:ListPlatformApplications"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "elasticloadbalancing:DescribeLoadBalancers"
                ],
                "Resource": [
                  "*"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                    "cloudtrail:GetTrailStatus",
                    "cloudtrail:DescribeTrails",
                    "cloudtrail:LookupEvents",
                    "cloudtrail:ListTags",
                    "cloudtrail:ListPublicKeys",
                    "cloudtrail:GetEventSelectors"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "iam:PassRole",
                  "iam:Get*",
                  "iam:List*"
                ],
                "Resource": "arn:aws:iam::*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "kms:*"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "acm:*",
                  "acm-pca:*",
                  "apigateway:*",
                  "cloudfront:*",
                  "codebuild:*",
                  "codedeploy:*",
                  "cloudwatch:*",
                  "codecommit:*",
                  "codepipeline:*",
                  "dynamodb:*",
                  "ecr:*",
                  "events:*",
                  "guardduty:*",
                  "iam:PassRole",
                  "lambda:*",
                  "logs:*",
                  "resource-groups:*",
                  "route53:*",
                  "route53domains:*",
                  "route53resolver:*",
                  "secretsmanager:*",
                  "ssm:*",
                  "sns:*",
                  "s3:*",
                  "tag:*"   
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "iam:CreateServiceLinkedRole",
                "Resource": "*",
                "Condition": {
                    "StringLike": {
                        "iam:AWSServiceName": "guardduty.amazonaws.com"
                    }
                }
            },
            {
                "Action": [
                  "cloudformation:CreateChangeSet",
                  "cloudformation:DescribeChangeSet",
                  "cloudformation:DescribeStackResource",
                  "cloudformation:DescribeStacks",
                  "cloudformation:ExecuteChangeSet",
                  "ec2:DescribeSecurityGroups",
                  "ec2:DescribeSubnets",
                  "ec2:DescribeVpcs",
                  "kms:DescribeKey",
                  "kms:ListAliases",
                  "kms:ListKeys",
                  "lambda:ListFunctions",
                  "rds:DescribeDBInstances",
                  "tag:GetResources"
                ],
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Action": [
                  "serverlessrepo:CreateCloudFormationChangeSet"
                ],
                "Effect": "Allow",
                "Resource": "arn:aws:serverlessrepo:*:*:applications/SecretsManager*"
              },
              {
                "Effect": "Allow",
                "Action": ["cloudformation:*"],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "sts:AssumeRole",
                "Resource": [
                  { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/littleware/app/*" ]] }
                ]
              }
            ]
          },
          "Roles": [
            { "Ref" : "IamRoleAdmin" },
            { "Ref" : "IamRoleOperator" }
          ]
        }
      },

      "ApiGatewayCloudWatchLogsRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "RoleName" : "littleGateway",
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Principal": { "Service": ["apigateway.amazonaws.com"] },
              "Action": ["sts:AssumeRole"]
            }]
          },
          "Policies": [{
            "PolicyName": "ApiGatewayLogsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:DescribeLogGroups",
                  "logs:DescribeLogStreams",
                  "logs:PutLogEvents",
                  "logs:GetLogEvents",
                  "logs:FilterLogEvents"
                ],
                "Resource": "*"
              }]
            }
          }]
        }
      },

      "ApiGatewayAccount": {
        "Type": "AWS::ApiGateway::Account",
        "Properties": {
          "CloudWatchRoleArn": {"Fn::GetAtt" : ["ApiGatewayCloudWatchLogsRole", "Arn"] }
        }
      }
  },

  "Outputs" : {
  }
}
